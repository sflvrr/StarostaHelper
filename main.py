import json
import os
import html
from datetime import datetime, date, timedelta
from zoneinfo import ZoneInfo
from random import choice
import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

load_dotenv()
TZ = ZoneInfo("Europe/Vienna")
WEEKDAY_RU = {0: "–ü–Ω", 1: "–í—Ç", 2: "–°—Ä", 3: "–ß—Ç", 4: "–ü—Ç", 5: "–°–±", 6: "–í—Å"}

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher(storage=MemoryStorage())

with open("data/messages.json", "r", encoding="utf-8") as f:
    TEXTS = json.load(f)
with open("data/answers.json", "r", encoding="utf-8") as f:
    ANSWERS = json.load(f)

create_hw_post = False

def escape_md(text: str) -> str:
    return html.escape(text or "")

def read_json(path: str, default):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return default

def write_json(path: str, data) -> bool:
    try:
        os.makedirs(os.path.dirname(path), exist_ok=True)
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        return True
    except Exception:
        return False

def human_date(dt: datetime) -> str:
    months = ["—è–Ω–≤–∞—Ä—è","—Ñ–µ–≤—Ä–∞–ª—è","–º–∞—Ä—Ç–∞","–∞–ø—Ä–µ–ª—è","–º–∞—è","–∏—é–Ω—è","–∏—é–ª—è","–∞–≤–≥—É—Å—Ç–∞","—Å–µ–Ω—Ç—è–±—Ä—è","–æ–∫—Ç—è–±—Ä—è","–Ω–æ—è–±—Ä—è","–¥–µ–∫–∞–±—Ä—è"]
    weekdays = ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"]
    return f"{dt.day} {months[dt.month-1]} {dt.year}, {weekdays[(dt.weekday())]} {dt:%H:%M}"

def format_link(text: str, link: str | None) -> str:
    if link:
        return f'<a href="{escape_md(link)}">{escape_md(text)}</a>'
    return escape_md(text)

def greeting_by_time(dt: datetime) -> str:
    h = dt.hour
    if 5 <= h <= 10:
        return "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
    if 11 <= h <= 16:
        return "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
    return "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"

def current_iso_week_key(d: date) -> str:
    iso_year, iso_week, _ = d.isocalendar()
    return f"{iso_year}-W{iso_week:02d}"

def days_keyboard() -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton(text="–ü–Ω"), KeyboardButton(text="–í—Ç"), KeyboardButton(text="–°—Ä")],
        [KeyboardButton(text="–ß—Ç"), KeyboardButton(text="–ü—Ç"), KeyboardButton(text="–°–±")],
        [KeyboardButton(text="–í—Å")]
    ]
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

DEADLINES_PATH = "data/deadlines.json"

def load_deadlines() -> list[dict]:
    return read_json(DEADLINES_PATH, [])

def save_deadlines(items: list[dict]) -> bool:
    return write_json(DEADLINES_PATH, items)

def parse_due_dt(due_str: str | None) -> datetime | None:
    if not due_str:
        return None
    try:
        dt = datetime.fromisoformat(due_str)
        return dt.replace(tzinfo=dt.tzinfo or TZ).astimezone(TZ)
    except Exception:
        try:
            d = datetime.strptime(due_str, "%Y-%m-%d").date()
            return datetime(d.year, d.month, d.day, 23, 59, tzinfo=TZ)
        except Exception:
            return None

def prune_old_deadlines(grace_days: int = 3) -> int:
    items = load_deadlines()
    if not items:
        return 0
    now = datetime.now(TZ)
    keep = []
    removed = 0
    for it in items:
        due = parse_due_dt(it.get("due"))
        if not due:
            removed += 1
            continue
        if now - due > timedelta(days=grace_days):
            removed += 1
        else:
            keep.append(it)
    if removed:
        save_deadlines(keep)
    return removed

def format_deadline_line(item: dict) -> str:
    title = item.get("title", "–ó–∞–¥–∞–Ω–∏–µ")
    subj = item.get("subject", "")
    link = item.get("link")
    due = parse_due_dt(item.get("due"))
    when = due.strftime("%H:%M") if due else "?"
    subj_fmt = f" <i>({escape_md(subj)})</i>" if subj else ""
    return f"‚Ä¢ {format_link(title, link)}{subj_fmt} ‚Äî <b>{when}</b>"

def get_deadlines_for_date(d: date) -> list[str]:
    items = load_deadlines()
    lines = []
    for it in items:
        due = parse_due_dt(it.get("due"))
        if due and due.date() == d:
            lines.append(format_deadline_line(it))
    def tkey(line: str):
        try:
            hhmm = line.rsplit("‚Äî", 1)[-1].strip()
            hhmm = hhmm.strip("<b>").strip("</b>")
            return datetime.strptime(hhmm, "%H:%M").time()
        except Exception:
            return datetime.strptime("99:99", "%H:%M").time()
    lines.sort(key=tkey)
    return lines

FACTS_PATH = "data/facts.json"

def load_facts() -> list[str]:
    return read_json(FACTS_PATH, [])

def get_random_fact() -> str:
    facts = load_facts()
    if not facts:
        return "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
    return choice(facts)

def load_specials():
    return read_json("data/special_lectures.json", {"added": {}, "deleted": {}})

def normalize_items(items: list[dict]) -> list[dict]:
    return [{
        "time": (it.get("time") or "").strip(),
        "title": (it.get("title") or "").strip(),
        "link": it.get("link")
    } for it in (items or [])]

def apply_specials_for_date(base_items: list[dict], date_str: str, specials: dict) -> list[dict]:
    base = normalize_items(base_items)
    added = normalize_items((specials.get("added", {}) or {}).get(date_str, []))
    deleted = normalize_items((specials.get("deleted", {}) or {}).get(date_str, []))
    def key(it): return (it.get("time",""), it.get("title",""))
    deleted_keys = {key(x) for x in deleted}
    base = [it for it in base if key(it) not in deleted_keys]
    combined = base + added
    def sort_key(it):
        try:
            return datetime.strptime(it.get("time","99:99"), "%H:%M").time()
        except Exception:
            return datetime.strptime("99:99", "%H:%M").time()
    combined.sort(key=sort_key)
    return combined

def collect_today_schedule_lines() -> list[str]:
    schedule = read_json("data/schedule.json", {})
    specials = load_specials()
    today = datetime.now(TZ).date()
    date_str = today.isoformat()
    base_items = []
    if schedule:
        week_key = current_iso_week_key(today)
        weekday_key = WEEKDAY_RU[today.weekday()]
        for day_block in schedule.get(week_key, []):
            if day_block.get("day") == weekday_key:
                base_items = day_block.get("items", [])
                break
    effective = apply_specials_for_date(base_items, date_str, specials)
    return [
        f"{escape_md(it.get('time',''))} ‚Äî {format_link(it.get('title','–ó–∞–Ω—è—Ç–∏–µ'), it.get('link'))}"
        for it in effective
    ]

async def build_day_message_v2() -> str:
    now = datetime.now(TZ)
    greeting = greeting_by_time(now)
    today_lines = collect_today_schedule_lines()
    schedule_block = "<b>–°–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å:</b>\n" + (
        "\n".join(f"‚Ä¢ {line}" for line in today_lines) if today_lines
        else "‚Ä¢ –ü–æ—Ö–æ–∂–µ, –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–∞—Ä –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ—Ç üôÇ"
    )
    fact_line = get_random_fact()
    fact_block = f"<b>–§–∞–∫—Ç –¥–Ω—è:</b>\n{escape_md(fact_line)}"
    today = now.date()
    tomorrow = today + timedelta(days=1)
    today_deadlines = get_deadlines_for_date(today)
    tomorrow_deadlines = get_deadlines_for_date(tomorrow)
    if today_deadlines:
        today_dl_block = "<b>–°–µ–≥–æ–¥–Ω—è —Ç–∞–∫–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã:</b>\n\n" + "\n\n".join(today_deadlines)
    else:
        today_dl_block = "–°–µ–≥–æ–¥–Ω—è –¥–µ–¥–ª–∞–π–Ω–æ–≤ –Ω–µ—Ç"
    if tomorrow_deadlines:
        tomorrow_dl_block = "\n<b>–ó–∞–≤—Ç—Ä–∞ –¥–µ–¥–ª–∞–π–Ω—ã:</b>\n\n" + "\n\n".join(tomorrow_deadlines)
    else:
        tomorrow_dl_block = "\n–ù–∞ –∑–∞–≤—Ç—Ä–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –Ω–µ—Ç" if today_deadlines else "\n–ù–∞ –∑–∞–≤—Ç—Ä–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ —Ç–æ–∂–µ –Ω–µ—Ç"
    header = f"<b>–í—Å–µ–º {greeting}!</b>"
    footer = "<b>–í—Å–µ–º —Ö–æ—Ä–æ—à–µ–≥–æ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!</b>"
    return (
        f"{header}\n\n"
        f"{schedule_block}\n\n"
        f"{today_dl_block}\n"
        f"{tomorrow_dl_block}\n\n"
        f"{fact_block}\n\n"
        f"{footer}"
    )

def create_hw_post_message(subject: str, hw_text: str, deadline: str) -> str:
    subject = subject.strip().lstrip("#:>- ")
    hw_text = hw_text.strip()
    deadline_text = deadline.strip()
    due_show = deadline_text
    try:
        try:
            due_dt = datetime.fromisoformat(deadline_text).astimezone(TZ)
        except ValueError:
            due_dt = datetime.strptime(deadline_text, "%Y-%m-%d").replace(tzinfo=TZ)
        due_show = human_date(due_dt)
    except Exception:
        pass
    return (
        f"<b>–î–ó –ø–æ {escape_md(subject)}!</b>\n"
        f"{escape_md(hw_text)}\n"
        f"<code>–î–µ–¥–ª–∞–π–Ω: {escape_md(due_show)}</code>"
    )

@dp.message(CommandStart())
async def start(message: types.Message):
    removed = prune_old_deadlines(grace_days=3)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–æ–æ–±—â–µ–Ω–∏–µ –¥–Ω—è"),
             KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç —Å –î–ó")],
            [KeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –î–ó"),
             KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
            [KeyboardButton(text="–ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )
    msg = ANSWERS['start']
    if removed:
        msg += f"\n\n(–£–¥–∞–ª–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤: {removed})"
    await message.answer(msg, reply_markup=kb)

@dp.message(F.text.in_(["/help", "–ü–æ–º–æ—â—å"]))
async def help(message: types.Message):
    await message.answer(ANSWERS['help'])

@dp.message(F.text.in_(["–°–æ–æ–±—â–µ–Ω–∏–µ –¥–Ω—è", "/day_message"]))
async def day_message(message: types.Message):
    prune_old_deadlines(grace_days=3)
    text = await build_day_message_v2()
    await message.answer(text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

@dp.message(F.text.in_(["–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç —Å –î–ó", "/hw_post"]))
async def hw_post(message: types.Message):
    items = load_deadlines()
    if not items:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –î–ó üéâ")
        return
    def due_key(it):
        dt = parse_due_dt(it.get("due"))
        return dt or datetime.max.replace(tzinfo=TZ)
    items.sort(key=due_key)
    blocks = []
    for it in items:
        subject = it.get("subject") or "–ü—Ä–µ–¥–º–µ—Ç"
        text = it.get("title") or "–ó–∞–¥–∞–Ω–∏–µ"
        due_str = it.get("due") or ""
        blocks.append(create_hw_post_message(subject, text, due_str))
    post = "\n\n" + "<b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –î–ó</b>\n\n" + "\n\n".join(blocks)
    await message.answer(post, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

@dp.message(F.text.in_(["–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –î–ó", "/update_hw_post"]))
async def update_hw_post(message: types.Message):
    global create_hw_post
    create_hw_post = True
    await message.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ 3 —Å—Ç—Ä–æ–∫–∏:\n"
        "1) –ü—Ä–µ–¥–º–µ—Ç\n2) –¢–µ–∫—Å—Ç –î–ó\n3) –î–µ–¥–ª–∞–π–Ω (YYYY-MM-DD –∏–ª–∏ YYYY-MM-DD HH:MM)\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–î–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞\n–†–∞–∑–æ–±—Ä–∞—Ç—å 5 –∑–∞–¥–∞—á –∏–∑ –ª–∏—Å—Ç–∫–∞ #3\n2025-10-27 23:59"
    )

@dp.message(F.text.in_(["–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "/show schedule"]))
async def show_schedule(message: types.Message):
    schedule = read_json("data/schedule.json", {})
    if not schedule:
        await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ–µ. –ó–∞–≥—Ä—É–∑–∏—Ç–µ data/schedule.json.")
        return
    parts = ["<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>"]
    for week in sorted(schedule.keys()):
        parts.append(f"\n<b>{escape_md(week)}</b>")
        for day_block in schedule[week]:
            day_name = day_block.get("day", "?")
            items = day_block.get("items", [])
            if not items:
                continue
            lines = []
            for it in items:
                tm = escape_md(it.get("time", ""))
                title = it.get("title", "–ó–∞–Ω—è—Ç–∏–µ")
                link = it.get("link")
                lines.append(f"{tm} ‚Äî {format_link(title, link)}")
            parts.append(f"<u>{escape_md(day_name)}</u>\n" + "\n".join(lines))
    await message.answer("\n".join(parts), parse_mode=ParseMode.HTML, disable_web_page_preview=True)

@dp.message()
async def unk(message: types.Message):
    global create_hw_post
    ans = ANSWERS.get('unk', "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª :(")
    if create_hw_post:
        try:
            lines = [l for l in (message.text or "").split("\n") if l.strip()]
            if len(lines) < 3:
                raise ValueError("–ù—É–∂–Ω–æ 3 —Å—Ç—Ä–æ–∫–∏ (–ø—Ä–µ–¥–º–µ—Ç, —Ç–µ–∫—Å—Ç, –¥–µ–¥–ª–∞–π–Ω).")
            subject, hw_text, deadline = lines[0], "\n".join(lines[1:-1]), lines[-1]
            data = load_deadlines()
            data.append({"title": hw_text, "subject": subject, "due": deadline})
            save_deadlines(data)
            ans = create_hw_post_message(subject, hw_text, deadline)
            create_hw_post = False
            await message.answer(ans, parse_mode=ParseMode.HTML)
            return
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —Ç–µ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–æ–º.")
            return
    await message.answer(ans)

if __name__ == "__main__":
    prune_old_deadlines(grace_days=3)
    asyncio.run(dp.start_polling(bot))